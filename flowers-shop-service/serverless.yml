service: flowers-shop-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:*
      - sqs:*
      - sns:*
    Resource: "*"

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
        VisibilityTimeout: 3600 # Set the visibility timeout in seconds
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    emailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        Endpoint: daryanovak18@gmail.com

functions:
  getProductsList:
    handler: handlers/getProductsList.handler
    events:
      - http:
          path: /products
          method: get
    environment:
      PRODUCTS_TABLE: ${self:custom.productsTable}
      STOCKS_TABLE: ${self:custom.stocksTable}
  getProductsById:
    handler: handlers/getProductsById.handler
    events:
      - http:
          path: /products/{productId}
          method: get
    environment:
      PRODUCTS_TABLE: ${self:custom.productsTable}
      STOCKS_TABLE: ${self:custom.stocksTable}
  createProduct:
    handler: handlers/createProduct.handler
    events:
      - http:
          path: /products
          method: post
    environment:
      PRODUCTS_TABLE: ${self:custom.productsTable}
  catalogBatchProces:
    handler: handlers/catalogBatchProces.handler
    events:
      - sqs:
          arn: "arn:aws:sqs:eu-west-1:416847255302:catalogItemsQueue"
          batchSize: 5
    environment:
      PRODUCTS_TABLE: ${self:custom.productsTable}
      SNS_TOPIC_ARN: !Ref createProductTopic

custom:
  productsTable: "products"
  stocksTable: "stocks"
  uploadBucket: "flowers-shop-upload"
